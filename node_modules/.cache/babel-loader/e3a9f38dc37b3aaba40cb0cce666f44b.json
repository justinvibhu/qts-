{"ast":null,"code":"import { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\nconst serializableWarnings = [];\nconst duplicateNameWarnings = [];\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\n\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  const {\n    key,\n    routeNames,\n    ...partialState\n  } = state;\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n      return {\n        ...route,\n        state: getPartialState(route.state)\n      };\n    })\n  };\n};\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\n\nconst BaseNavigationContainer = /*#__PURE__*/React.forwardRef(function BaseNavigationContainer(_ref, ref) {\n  let {\n    initialState,\n    onStateChange,\n    onUnhandledAction,\n    independent,\n    children\n  } = _ref;\n  const parent = React.useContext(NavigationStateContext);\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  const [state, getState, setState, scheduleUpdate, flushUpdates] = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const navigatorKeyRef = React.useRef();\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const {\n    listeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const dispatch = React.useCallback(action => {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch(action));\n    }\n  }, [listeners.focus]);\n  const canGoBack = React.useCallback(() => {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    const {\n      result,\n      handled\n    } = listeners.focus[0](navigation => navigation.canGoBack());\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  }, [listeners.focus]);\n  const resetRoot = React.useCallback(state => {\n    var _state$key, _keyedListeners$getSt, _keyedListeners$getSt2;\n    const target = (_state$key = state === null || state === void 0 ? void 0 : state.key) !== null && _state$key !== void 0 ? _state$key : (_keyedListeners$getSt = (_keyedListeners$getSt2 = keyedListeners.getState).root) === null || _keyedListeners$getSt === void 0 ? void 0 : _keyedListeners$getSt.call(_keyedListeners$getSt2).key;\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch({\n        ...CommonActions.reset(state),\n        target\n      }));\n    }\n  }, [keyedListeners.getState, listeners.focus]);\n  const getRootState = React.useCallback(() => {\n    var _keyedListeners$getSt3, _keyedListeners$getSt4;\n    return (_keyedListeners$getSt3 = (_keyedListeners$getSt4 = keyedListeners.getState).root) === null || _keyedListeners$getSt3 === void 0 ? void 0 : _keyedListeners$getSt3.call(_keyedListeners$getSt4);\n  }, [keyedListeners.getState]);\n  const getCurrentRoute = React.useCallback(() => {\n    const state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    const route = findFocusedRoute(state);\n    return route;\n  }, [getRootState]);\n  const emitter = useEventEmitter();\n  const {\n    addOptionsGetter,\n    getCurrentOptions\n  } = useOptionsGetters({});\n  const navigation = React.useMemo(() => ({\n    ...Object.keys(CommonActions).reduce((acc, name) => {\n      acc[name] = function () {\n        return (\n          // @ts-expect-error: this is ok\n          dispatch(CommonActions[name](...arguments))\n        );\n      };\n      return acc;\n    }, {}),\n    ...emitter.create('root'),\n    dispatch,\n    resetRoot,\n    isFocused: () => true,\n    canGoBack,\n    getParent: () => undefined,\n    getState: () => stateRef.current,\n    getRootState,\n    getCurrentRoute,\n    getCurrentOptions,\n    isReady: () => listeners.focus[0] != null\n  }), [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, listeners.focus, resetRoot]);\n  React.useImperativeHandle(ref, () => navigation, [navigation]);\n  const onDispatchAction = React.useCallback((action, noop) => {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action,\n        noop,\n        stack: stackRef.current\n      }\n    });\n  }, [emitter]);\n  const lastEmittedOptionsRef = React.useRef();\n  const onOptionsChange = React.useCallback(options => {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options\n      }\n    });\n  }, [emitter]);\n  const stackRef = React.useRef();\n  const builderContext = React.useMemo(() => ({\n    addListener,\n    addKeyedListener,\n    onDispatchAction,\n    onOptionsChange,\n    stackRef\n  }), [addListener, addKeyedListener, onDispatchAction, onOptionsChange]);\n  const scheduleContext = React.useMemo(() => ({\n    scheduleUpdate,\n    flushUpdates\n  }), [scheduleUpdate, flushUpdates]);\n  const isInitialRef = React.useRef(true);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const onStateChangeRef = React.useRef(onStateChange);\n  const stateRef = React.useRef(state);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    stateRef.current = state;\n  });\n  React.useEffect(() => {\n    const hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        const serializableResult = checkSerializable(hydratedState);\n        if (!serializableResult.serializable) {\n          const {\n            location,\n            reason\n          } = serializableResult;\n          let path = '';\n          let pointer = hydratedState;\n          let params = false;\n          for (let i = 0; i < location.length; i++) {\n            const curr = location[i];\n            const prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              var _pointer;\n              path += (_pointer = pointer) === null || _pointer === void 0 ? void 0 : _pointer.name;\n            } else if (!params) {\n              path += ` > ${curr}`;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += `[${curr}]`;\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += `.${curr}`;\n              } else {\n                path += `[${JSON.stringify(curr)}]`;\n              }\n            }\n          }\n          const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        const duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(locations => `\\n${locations.join(', ')}`)}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n          if (!duplicateNameWarnings.includes(message)) {\n            duplicateNameWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  const defaultOnUnhandledAction = React.useCallback(action => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const payload = action.payload;\n    let message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;\n    switch (action.type) {\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'JUMP_TO':\n        if (payload !== null && payload !== void 0 && payload.name) {\n          message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n    console.error(message);\n  }, []);\n  let element = /*#__PURE__*/React.createElement(NavigationContainerRefContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(ScheduleUpdateContext.Provider, {\n    value: scheduleContext\n  }, /*#__PURE__*/React.createElement(NavigationBuilderContext.Provider, {\n    value: builderContext\n  }, /*#__PURE__*/React.createElement(NavigationStateContext.Provider, {\n    value: context\n  }, /*#__PURE__*/React.createElement(UnhandledActionContext.Provider, {\n    value: onUnhandledAction !== null && onUnhandledAction !== void 0 ? onUnhandledAction : defaultOnUnhandledAction\n  }, /*#__PURE__*/React.createElement(EnsureSingleNavigator, null, children))))));\n  if (independent) {\n    // We need to clear any existing contexts for nested independent container to work correctly\n    element = /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: undefined\n    }, /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      value: undefined\n    }, element));\n  }\n  return element;\n});\nexport default BaseNavigationContainer;","map":{"version":3,"mappings":"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","names":["CommonActions","React","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationContext","NavigationRouteContext","NavigationStateContext","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useOptionsGetters","ScheduleUpdateContext","useSyncState","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","key","routeNames","partialState","stale","routes","map","route","BaseNavigationContainer","forwardRef","ref","initialState","onStateChange","onUnhandledAction","independent","children","parent","useContext","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","target","root","_keyedListeners$getSt","reset","getRootState","_keyedListeners$getSt3","getCurrentRoute","emitter","addOptionsGetter","getCurrentOptions","useMemo","Object","keys","reduce","acc","name","create","isFocused","getParent","stateRef","isReady","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","scheduleContext","isInitialRef","getIsInitial","context","onStateChangeRef","useEffect","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","_pointer","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","element","Provider","value"],"sources":["C:\\Users\\Admin\\Desktop\\Employee\\node_modules\\@react-navigation\\core\\lib\\module\\BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  InitialState,\n  NavigationAction,\n  NavigationState,\n  ParamListBase,\n  PartialState,\n  Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\n\nimport checkDuplicateRouteNames from './checkDuplicateRouteNames';\nimport checkSerializable from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport EnsureSingleNavigator from './EnsureSingleNavigator';\nimport findFocusedRoute from './findFocusedRoute';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationContainerRefContext from './NavigationContainerRefContext';\nimport NavigationContext from './NavigationContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nimport NavigationStateContext from './NavigationStateContext';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport useChildListeners from './useChildListeners';\nimport useEventEmitter from './useEventEmitter';\nimport useKeyedChildListeners from './useKeyedChildListeners';\nimport useOptionsGetters from './useOptionsGetters';\nimport { ScheduleUpdateContext } from './useScheduleUpdate';\nimport useSyncState from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nconst BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onUnhandledAction,\n      independent,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, pass 'independent={true}' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const [state, getState, setState, scheduleUpdate, flushUpdates] =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>();\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = React.useCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      },\n      [listeners.focus]\n    );\n\n    const canGoBack = React.useCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    }, [listeners.focus]);\n\n    const resetRoot = React.useCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      },\n      [keyedListeners.getState, listeners.focus]\n    );\n\n    const getRootState = React.useCallback(() => {\n      return keyedListeners.getState.root?.();\n    }, [keyedListeners.getState]);\n\n    const getCurrentRoute = React.useCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    }, [getRootState]);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState: () => stateRef.current,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady: () => listeners.focus[0] != null,\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        listeners.focus,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = React.useCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      },\n      [emitter]\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>();\n\n    const onOptionsChange = React.useCallback(\n      (options: object) => {\n        if (lastEmittedOptionsRef.current === options) {\n          return;\n        }\n\n        lastEmittedOptionsRef.current = options;\n\n        emitter.emit({\n          type: 'options',\n          data: { options },\n        });\n      },\n      [emitter]\n    );\n\n    const stackRef = React.useRef<string | undefined>();\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        stackRef,\n      }),\n      [addListener, addKeyedListener, onDispatchAction, onOptionsChange]\n    );\n\n    const scheduleContext = React.useMemo(\n      () => ({ scheduleUpdate, flushUpdates }),\n      [scheduleUpdate, flushUpdates]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onStateChangeRef = React.useRef(onStateChange);\n    const stateRef = React.useRef(state);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      stateRef.current = state;\n    });\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = React.useCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      },\n      []\n    );\n\n    let element = (\n      <NavigationContainerRefContext.Provider value={navigation}>\n        <ScheduleUpdateContext.Provider value={scheduleContext}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <EnsureSingleNavigator>{children}</EnsureSingleNavigator>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </ScheduleUpdateContext.Provider>\n      </NavigationContainerRefContext.Provider>\n    );\n\n    if (independent) {\n      // We need to clear any existing contexts for nested independent container to work correctly\n      element = (\n        <NavigationRouteContext.Provider value={undefined}>\n          <NavigationContext.Provider value={undefined}>\n            {element}\n          </NavigationContext.Provider>\n        </NavigationRouteContext.Provider>\n      );\n    }\n\n    return element;\n  }\n);\n\nexport default BaseNavigationContainer;\n"]},"metadata":{},"sourceType":"module"}