{"ast":null,"code":"import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\nexport default function useScrollToTop(ref) {\n  const navigation = useNavigation();\n  const route = useRoute();\n  React.useEffect(() => {\n    let current = navigation; // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n    if (!current) {\n      return;\n    }\n    const unsubscribe = current.addListener(\n    // We don't wanna import tab types here to avoid extra deps\n    // in addition, there are multiple tab implementations\n    // @ts-expect-error\n    'tabPress', e => {\n      // We should scroll to top only when the screen is focused\n      const isFocused = navigation.isFocused(); // In a nested stack navigator, tab press resets the stack to first screen\n      // So we should scroll to top only when we are on first screen\n\n      const isFirst = navigation === current || navigation.getState().routes[0].key === route.key; // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        const scrollable = getScrollableNode(ref);\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}","map":{"version":3,"names":["useNavigation","useRoute","React","getScrollableNode","ref","current","getScrollResponder","getNode","useScrollToTop","navigation","route","useEffect","getState","type","getParent","unsubscribe","addListener","e","isFocused","isFirst","routes","key","requestAnimationFrame","scrollable","defaultPrevented","scrollToTop","scrollTo","x","y","animated","scrollToOffset","offset","scrollResponderScrollTo"],"sources":["C:/Users/Admin/Desktop/Employee/node_modules/@react-navigation/native/lib/module/useScrollToTop.js"],"sourcesContent":["import { useNavigation, useRoute } from '@react-navigation/core';\nimport * as React from 'react';\n\nfunction getScrollableNode(ref) {\n  if (ref.current == null) {\n    return null;\n  }\n\n  if ('scrollToTop' in ref.current || 'scrollTo' in ref.current || 'scrollToOffset' in ref.current || 'scrollResponderScrollTo' in ref.current) {\n    // This is already a scrollable node.\n    return ref.current;\n  } else if ('getScrollResponder' in ref.current) {\n    // If the view is a wrapper like FlatList, SectionList etc.\n    // We need to use `getScrollResponder` to get access to the scroll responder\n    return ref.current.getScrollResponder();\n  } else if ('getNode' in ref.current) {\n    // When a `ScrollView` is wraped in `Animated.createAnimatedComponent`\n    // we need to use `getNode` to get the ref to the actual scrollview.\n    // Note that `getNode` is deprecated in newer versions of react-native\n    // this is why we check if we already have a scrollable node above.\n    return ref.current.getNode();\n  } else {\n    return ref.current;\n  }\n}\n\nexport default function useScrollToTop(ref) {\n  const navigation = useNavigation();\n  const route = useRoute();\n  React.useEffect(() => {\n    let current = navigation; // The screen might be inside another navigator such as stack nested in tabs\n    // We need to find the closest tab navigator and add the listener there\n\n    while (current && current.getState().type !== 'tab') {\n      current = current.getParent();\n    }\n\n    if (!current) {\n      return;\n    }\n\n    const unsubscribe = current.addListener( // We don't wanna import tab types here to avoid extra deps\n    // in addition, there are multiple tab implementations\n    // @ts-expect-error\n    'tabPress', e => {\n      // We should scroll to top only when the screen is focused\n      const isFocused = navigation.isFocused(); // In a nested stack navigator, tab press resets the stack to first screen\n      // So we should scroll to top only when we are on first screen\n\n      const isFirst = navigation === current || navigation.getState().routes[0].key === route.key; // Run the operation in the next frame so we're sure all listeners have been run\n      // This is necessary to know if preventDefault() has been called\n\n      requestAnimationFrame(() => {\n        const scrollable = getScrollableNode(ref);\n\n        if (isFocused && isFirst && scrollable && !e.defaultPrevented) {\n          if ('scrollToTop' in scrollable) {\n            scrollable.scrollToTop();\n          } else if ('scrollTo' in scrollable) {\n            scrollable.scrollTo({\n              x: 0,\n              y: 0,\n              animated: true\n            });\n          } else if ('scrollToOffset' in scrollable) {\n            scrollable.scrollToOffset({\n              offset: 0,\n              animated: true\n            });\n          } else if ('scrollResponderScrollTo' in scrollable) {\n            scrollable.scrollResponderScrollTo({\n              y: 0,\n              animated: true\n            });\n          }\n        }\n      });\n    });\n    return unsubscribe;\n  }, [navigation, ref, route.key]);\n}\n//# sourceMappingURL=useScrollToTop.js.map"],"mappings":"AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,wBAAwB;AAChE,OAAO,KAAKC,KAAK,MAAM,OAAO;AAE9B,SAASC,iBAAiB,CAACC,GAAG,EAAE;EAC9B,IAAIA,GAAG,CAACC,OAAO,IAAI,IAAI,EAAE;IACvB,OAAO,IAAI;EACb;EAEA,IAAI,aAAa,IAAID,GAAG,CAACC,OAAO,IAAI,UAAU,IAAID,GAAG,CAACC,OAAO,IAAI,gBAAgB,IAAID,GAAG,CAACC,OAAO,IAAI,yBAAyB,IAAID,GAAG,CAACC,OAAO,EAAE;IAC5I;IACA,OAAOD,GAAG,CAACC,OAAO;EACpB,CAAC,MAAM,IAAI,oBAAoB,IAAID,GAAG,CAACC,OAAO,EAAE;IAC9C;IACA;IACA,OAAOD,GAAG,CAACC,OAAO,CAACC,kBAAkB,EAAE;EACzC,CAAC,MAAM,IAAI,SAAS,IAAIF,GAAG,CAACC,OAAO,EAAE;IACnC;IACA;IACA;IACA;IACA,OAAOD,GAAG,CAACC,OAAO,CAACE,OAAO,EAAE;EAC9B,CAAC,MAAM;IACL,OAAOH,GAAG,CAACC,OAAO;EACpB;AACF;AAEA,eAAe,SAASG,cAAc,CAACJ,GAAG,EAAE;EAC1C,MAAMK,UAAU,GAAGT,aAAa,EAAE;EAClC,MAAMU,KAAK,GAAGT,QAAQ,EAAE;EACxBC,KAAK,CAACS,SAAS,CAAC,MAAM;IACpB,IAAIN,OAAO,GAAGI,UAAU,CAAC,CAAC;IAC1B;;IAEA,OAAOJ,OAAO,IAAIA,OAAO,CAACO,QAAQ,EAAE,CAACC,IAAI,KAAK,KAAK,EAAE;MACnDR,OAAO,GAAGA,OAAO,CAACS,SAAS,EAAE;IAC/B;IAEA,IAAI,CAACT,OAAO,EAAE;MACZ;IACF;IAEA,MAAMU,WAAW,GAAGV,OAAO,CAACW,WAAW;IAAE;IACzC;IACA;IACA,UAAU,EAAEC,CAAC,IAAI;MACf;MACA,MAAMC,SAAS,GAAGT,UAAU,CAACS,SAAS,EAAE,CAAC,CAAC;MAC1C;;MAEA,MAAMC,OAAO,GAAGV,UAAU,KAAKJ,OAAO,IAAII,UAAU,CAACG,QAAQ,EAAE,CAACQ,MAAM,CAAC,CAAC,CAAC,CAACC,GAAG,KAAKX,KAAK,CAACW,GAAG,CAAC,CAAC;MAC7F;;MAEAC,qBAAqB,CAAC,MAAM;QAC1B,MAAMC,UAAU,GAAGpB,iBAAiB,CAACC,GAAG,CAAC;QAEzC,IAAIc,SAAS,IAAIC,OAAO,IAAII,UAAU,IAAI,CAACN,CAAC,CAACO,gBAAgB,EAAE;UAC7D,IAAI,aAAa,IAAID,UAAU,EAAE;YAC/BA,UAAU,CAACE,WAAW,EAAE;UAC1B,CAAC,MAAM,IAAI,UAAU,IAAIF,UAAU,EAAE;YACnCA,UAAU,CAACG,QAAQ,CAAC;cAClBC,CAAC,EAAE,CAAC;cACJC,CAAC,EAAE,CAAC;cACJC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,MAAM,IAAI,gBAAgB,IAAIN,UAAU,EAAE;YACzCA,UAAU,CAACO,cAAc,CAAC;cACxBC,MAAM,EAAE,CAAC;cACTF,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ,CAAC,MAAM,IAAI,yBAAyB,IAAIN,UAAU,EAAE;YAClDA,UAAU,CAACS,uBAAuB,CAAC;cACjCJ,CAAC,EAAE,CAAC;cACJC,QAAQ,EAAE;YACZ,CAAC,CAAC;UACJ;QACF;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IACF,OAAOd,WAAW;EACpB,CAAC,EAAE,CAACN,UAAU,EAAEL,GAAG,EAAEM,KAAK,CAACW,GAAG,CAAC,CAAC;AAClC"},"metadata":{},"sourceType":"module"}